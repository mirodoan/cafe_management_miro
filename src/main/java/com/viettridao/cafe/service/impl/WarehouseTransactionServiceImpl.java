package com.viettridao.cafe.service.impl;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import com.viettridao.cafe.dto.response.warehouse_transaction.WarehouseTransactionPageResponse;
import com.viettridao.cafe.service.WarehouseTransactionService;
import lombok.RequiredArgsConstructor;

import org.springframework.stereotype.Service;

import com.viettridao.cafe.dto.response.warehouse_transaction.WarehouseTransactionResponse;
import com.viettridao.cafe.mapper.WarehouseTransactionMapper;
import com.viettridao.cafe.repository.ExportRepository;
import com.viettridao.cafe.repository.ImportRepository;

/**
 * WarehouseTransactionServiceImpl
 *
 * Version 1.0
 *
 * Date: 18-07-2025
 *
 * Copyright
 *
 * Modification Logs:
 * DATE         AUTHOR      DESCRIPTION
 * -------------------------------------------------------
 * 18-07-2025   mirodoan    Create
 *
 * Service cho qu·∫£n l√Ω giao d·ªãch nh·∫≠p xu·∫•t trong kho.
 * Ch·ªãu tr√°ch nhi·ªám x·ª≠ l√Ω logic nghi·ªáp v·ª• li√™n quan ƒë·∫øn giao d·ªãch nh·∫≠p xu·∫•t trong kho h√†ng.
 */
@Service
@RequiredArgsConstructor
public class WarehouseTransactionServiceImpl implements WarehouseTransactionService {

    // Inject c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt
    private final WarehouseTransactionMapper warehouseTransactionMapper;
    private final ImportRepository importRepository;
    private final ExportRepository exportRepository;

    /**
     * L·∫•y danh s√°ch giao d·ªãch nh·∫≠p/xu·∫•t, c√≥ h·ªó tr·ª£ t√¨m ki·∫øm theo t√™n h√†ng h√≥a v√† ph√¢n trang th·ªß c√¥ng.
     *
     * @param keyword t·ª´ kh√≥a t√¨m ki·∫øm theo t√™n h√†ng h√≥a
     * @param page    s·ªë trang hi·ªán t·∫°i (b·∫Øt ƒë·∫ßu t·ª´ 0)
     * @param size    s·ªë b·∫£n ghi m·ªói trang
     * @return ƒë·ªëi t∆∞·ª£ng ch·ª©a danh s√°ch ph√¢n trang v√† metadata
     */
    @Override
    public WarehouseTransactionPageResponse getTransactions(String keyword, int page, int size) {
        // Kh·ªüi t·∫°o danh s√°ch k·∫øt qu·∫£ t·ªïng h·ª£p t·ª´ c·∫£ ƒë∆°n nh·∫≠p v√† ƒë∆°n xu·∫•t
        List<WarehouseTransactionResponse> allTransactions = new ArrayList<>();

        // üîπ L·∫•y danh s√°ch ƒë∆°n nh·∫≠p ch∆∞a b·ªã x√≥a m·ªÅm, map th√†nh DTO v√† l·ªçc theo keyword
        importRepository.findAllByIsDeletedFalse().forEach(imp -> {
            try {
                WarehouseTransactionResponse tx = warehouseTransactionMapper.fromImport(imp);

                // N·∫øu t√™n h√†ng h√≥a kh·ªõp v·ªõi t·ª´ kh√≥a, th√™m v√†o danh s√°ch
                if (matchesKeyword(tx, keyword)) {
                    allTransactions.add(tx);
                }
            } catch (Exception e) {
                System.err.println("L·ªói mapping import: " + e.getMessage());
            }
        });

        // üîπ L·∫•y danh s√°ch ƒë∆°n xu·∫•t ch∆∞a b·ªã x√≥a m·ªÅm, map th√†nh DTO v√† l·ªçc theo keyword
        exportRepository.findAllByIsDeletedFalse().forEach(exp -> {
            try {
                WarehouseTransactionResponse tx = warehouseTransactionMapper.fromExport(exp);

                // N·∫øu t√™n h√†ng h√≥a kh·ªõp v·ªõi t·ª´ kh√≥a, th√™m v√†o danh s√°ch
                if (matchesKeyword(tx, keyword)) {
                    allTransactions.add(tx);
                }
            } catch (Exception e) {
                System.err.println("L·ªói mapping export: " + e.getMessage());
            }
        });

        // üîπ S·∫Øp x·∫øp danh s√°ch theo ng√†y m·ªõi nh·∫•t (importDate ho·∫∑c exportDate gi·∫£m d·∫ßn)
        allTransactions.sort(Comparator.comparing(
                tx -> tx.getImportDate() != null ? tx.getImportDate() : tx.getExportDate(),
                Comparator.reverseOrder())
        );

        // üîπ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ph√¢n trang th·ªß c√¥ng
        int totalElements = allTransactions.size();              // T·ªïng s·ªë giao d·ªãch sau l·ªçc
        int fromIndex = page * size;                             // V·ªã tr√≠ b·∫Øt ƒë·∫ßu c·ªßa trang hi·ªán t·∫°i
        int toIndex = Math.min(fromIndex + size, totalElements); // V·ªã tr√≠ k·∫øt th√∫c (kh√¥ng v∆∞·ª£t qu√° t·ªïng)

        // N·∫øu fromIndex v∆∞·ª£t qu√° totalElements, tr·∫£ danh s√°ch r·ªóng
        List<WarehouseTransactionResponse> pagedList = new ArrayList<>();
        if (fromIndex < totalElements) {
            pagedList = allTransactions.subList(fromIndex, toIndex);
        }

        // üîπ T·∫°o ƒë·ªëi t∆∞·ª£ng response v√† g√°n c√°c th√¥ng tin ph√¢n trang
        WarehouseTransactionPageResponse response = new WarehouseTransactionPageResponse();
        response.setPageNumber(page);                                 // Trang hi·ªán t·∫°i
        response.setPageSize(size);                                   // K√≠ch th∆∞·ªõc trang
        response.setTotalElements(totalElements);                     // T·ªïng s·ªë b·∫£n ghi sau l·ªçc
        response.setTotalPages((int) Math.ceil((double) totalElements / size)); // T·ªïng s·ªë trang
        response.setTransactions(pagedList);                          // Danh s√°ch k·∫øt qu·∫£ th·ª±c t·∫ø c·ªßa trang

        return response;
    }

    /**
     * H√†m h·ªó tr·ª£: ki·ªÉm tra xem s·∫£n ph·∫©m trong giao d·ªãch c√≥ ch·ª©a t·ª´ kh√≥a t√¨m ki·∫øm hay kh√¥ng
     *
     * @param tx      DTO giao d·ªãch kho
     * @param keyword t·ª´ kh√≥a t√¨m ki·∫øm (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
     * @return true n·∫øu kh·ªõp, false n·∫øu kh√¥ng
     */
    private boolean matchesKeyword(WarehouseTransactionResponse tx, String keyword) {
        if (keyword == null || keyword.isBlank()) return true; // N·∫øu kh√¥ng c√≥ t·ª´ kh√≥a ‚Üí kh√¥ng l·ªçc
        return tx.getProductName() != null &&
                tx.getProductName().toLowerCase().contains(keyword.toLowerCase());
    }
}